// Code generated by goyacc -l -v grammar.out -o grammar.go grammar.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"fmt"

	"github.com/basecomplextech/spec/internal/lang/syntax"
)

type yySymType struct {
	yys int
	// Tokens
	ident   string
	bool    bool
	integer int
	string  string

	// Type
	type_ *syntax.Type

	// Import
	import_ *syntax.Import
	imports []*syntax.Import

	// Option
	option  *syntax.Option
	options []*syntax.Option

	// Definition
	definition  *syntax.Definition
	definitions []*syntax.Definition

	// Enum
	enum_value  *syntax.EnumValue
	enum_values []*syntax.EnumValue

	// Field
	field  *syntax.Field
	fields syntax.Fields

	// Struct
	struct_field  *syntax.StructField
	struct_fields []*syntax.StructField

	// Service
	service        *syntax.Service
	method         *syntax.Method
	methods        []*syntax.Method
	method_input   syntax.MethodInput
	method_output  syntax.MethodOutput
	method_channel *syntax.MethodChannel
	method_field   *syntax.Field
	method_fields  syntax.Fields
}

const ANY = 57346
const ENUM = 57347
const IMPORT = 57348
const MESSAGE = 57349
const ONEWAY = 57350
const OPTIONS = 57351
const STRUCT = 57352
const SERVICE = 57353
const SUBSERVICE = 57354
const IDENT = 57355
const INTEGER = 57356
const STRING = 57357
const METHOD_OUTPUT = 57358

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ANY",
	"ENUM",
	"IMPORT",
	"MESSAGE",
	"ONEWAY",
	"OPTIONS",
	"STRUCT",
	"SERVICE",
	"SUBSERVICE",
	"IDENT",
	"INTEGER",
	"STRING",
	"METHOD_OUTPUT",
	"'('",
	"')'",
	"'='",
	"'['",
	"']'",
	"'.'",
	"'{'",
	"'}'",
	"';'",
	"','",
	"'<'",
	"'-'",
	"'>'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 98,
	18, 24,
	27, 24,
	28, 24,
	-2, 1,
	-1, 99,
	18, 26,
	27, 26,
	28, 26,
	-2, 3,
	-1, 100,
	18, 27,
	27, 27,
	28, 27,
	-2, 5,
}

const yyPrivate = 57344

const yyLast = 212

var yyAct = [...]uint8{
	63, 112, 111, 102, 64, 91, 110, 103, 43, 99,
	55, 48, 100, 139, 50, 51, 52, 53, 98, 67,
	130, 129, 68, 128, 129, 65, 138, 127, 66, 128,
	125, 67, 113, 115, 68, 65, 119, 123, 126, 121,
	66, 106, 105, 115, 44, 124, 104, 65, 67, 60,
	56, 68, 93, 88, 113, 62, 77, 66, 39, 38,
	37, 95, 71, 74, 74, 36, 35, 81, 80, 89,
	44, 78, 82, 47, 67, 48, 49, 68, 50, 51,
	52, 53, 45, 66, 76, 86, 40, 109, 94, 96,
	142, 97, 141, 75, 33, 107, 114, 94, 108, 31,
	47, 122, 48, 49, 120, 50, 51, 52, 53, 45,
	47, 117, 48, 49, 84, 50, 51, 52, 53, 45,
	72, 116, 8, 131, 6, 134, 133, 136, 137, 135,
	69, 140, 47, 67, 48, 49, 68, 50, 51, 52,
	53, 45, 66, 5, 3, 57, 34, 132, 47, 65,
	48, 49, 58, 50, 51, 52, 53, 45, 99, 85,
	48, 100, 79, 50, 51, 52, 53, 98, 25, 16,
	24, 17, 87, 23, 18, 19, 20, 67, 30, 29,
	68, 28, 27, 26, 118, 61, 66, 1, 101, 92,
	90, 83, 73, 15, 14, 54, 70, 13, 42, 12,
	41, 59, 11, 7, 10, 4, 21, 32, 2, 9,
	22, 46,
}

var yyPact = [...]int16{
	138, -1000, 134, 107, -1000, 105, -1000, 164, -1000, 155,
	-1000, -1000, -1000, -1000, -1000, -1000, 170, 169, 168, 166,
	165, 81, -1000, -1000, -1000, 131, 43, 42, 37, 36,
	35, -1000, -1000, 67, -1000, -1000, 144, -1000, -1000, -1000,
	130, 128, 30, -1000, 129, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 106, 96, 69, -1000, -1000, -1000,
	65, 32, 144, 148, -1000, 47, 45, -1000, -1000, -1000,
	-1000, 129, -1000, -1000, 97, -1000, 145, -1000, -1000, -1000,
	173, 159, 28, 44, 154, 21, -1000, -1000, -1000, -1000,
	17, 16, 70, -1000, -1000, 5, 103, 93, 45, -1000,
	-1000, 10, -1000, 129, -1000, -1000, -1000, -1000, 14, 144,
	83, 19, 12, -1, -4, -9, -1000, -1000, -1000, 144,
	133, -1000, -1000, -1000, 15, -1000, 27, 129, -2, -16,
	129, -1000, -1000, 74, -7, 72, 2, -1000, -1000, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 211, 7, 210, 209, 208, 207, 206, 205, 0,
	4, 204, 203, 202, 201, 200, 199, 8, 198, 197,
	196, 195, 194, 193, 10, 192, 191, 190, 5, 189,
	2, 1, 3, 188, 6, 187, 185, 184,
}

var yyR1 = [...]int8{
	0, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	35, 3, 3, 4, 4, 5, 5, 8, 8, 7,
	7, 6, 9, 9, 10, 10, 10, 10, 11, 11,
	11, 11, 11, 12, 12, 13, 14, 15, 15, 16,
	17, 18, 18, 18, 19, 20, 21, 21, 22, 23,
	24, 24, 25, 25, 25, 25, 25, 26, 26, 27,
	28, 28, 29, 29, 29, 29, 30, 30, 31, 31,
	34, 33, 33, 33, 32, 37, 37, 36, 36,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 0, 2, 0, 4, 0, 4, 0,
	2, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 5, 4, 0, 2, 6,
	3, 0, 1, 3, 5, 3, 0, 2, 5, 5,
	0, 2, 3, 4, 4, 4, 5, 3, 3, 1,
	1, 3, 3, 3, 5, 5, 3, 3, 3, 3,
	2, 0, 1, 3, 3, 0, 1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -35, -5, 6, -8, 9, 17, -12, 17, -4,
	-11, -13, -16, -19, -22, -23, 5, 7, 10, 11,
	12, -7, -3, 18, 15, 13, 13, 13, 13, 13,
	13, 18, -6, 13, 15, 23, 23, 23, 23, 23,
	19, -15, -18, -17, -2, 13, -1, 4, 6, 7,
	9, 10, 11, 12, -21, -24, -24, 15, 24, -14,
	-2, -36, 25, -9, -10, 20, 13, 4, 7, 24,
	-20, -2, 24, -25, -2, 24, 19, 24, -17, 14,
	21, 22, -9, -26, 17, 14, -10, 13, 25, 25,
	-27, -28, -29, 8, -10, 17, -10, -34, 13, 4,
	7, -33, -32, -2, 25, 25, 25, 25, -28, 17,
	-34, -30, -31, 27, -9, 28, 18, 18, -37, 26,
	-9, 25, 18, 18, 26, 18, 26, 28, 27, 28,
	29, -32, 14, -31, -9, -30, -9, -9, 28, 29,
	-9, 18, 18,
}

var yyDef = [...]int8{
	15, -2, 17, 0, 33, 0, 13, 10, 19, 0,
	34, 28, 29, 30, 31, 32, 0, 0, 0, 0,
	0, 0, 14, 16, 11, 0, 0, 0, 0, 0,
	0, 18, 20, 0, 12, 37, 41, 46, 50, 50,
	0, 0, 77, 42, 0, 1, 2, 3, 4, 5,
	6, 7, 8, 9, 0, 0, 0, 21, 35, 38,
	0, 0, 78, 0, 22, 0, 24, 26, 27, 44,
	47, 0, 48, 51, 0, 49, 0, 39, 43, 40,
	0, 0, 0, 0, 71, 0, 23, 25, 45, 52,
	0, 0, 0, 59, 60, 71, 0, 0, -2, -2,
	-2, 75, 72, 0, 36, 53, 54, 55, 0, 71,
	0, 0, 0, 0, 0, 0, 57, 58, 70, 76,
	0, 56, 61, 62, 0, 63, 0, 0, 0, 0,
	0, 73, 74, 0, 0, 0, 0, 66, 67, 68,
	69, 64, 65,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	17, 18, 3, 3, 26, 28, 22, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 25,
	27, 19, 29, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 20, 3, 21, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 23, 3, 24,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = yyDollar[1].ident
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = yyDollar[1].ident
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = "any"
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = "import"
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = "message"
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = "options"
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = "struct"
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = "service"
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = "subservice"
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			file := &syntax.File{
				Imports:     yyDollar[1].imports,
				Options:     yyDollar[2].options,
				Definitions: yyDollar[3].definitions,
			}
			setLexerResult(yylex, file)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if debugParser {
				fmt.Println("import ", yyDollar[1].string)
			}
			yyVAL.import_ = &syntax.Import{
				ID: trimString(yyDollar[1].string),
			}
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if debugParser {
				fmt.Println("import ", yyDollar[1].ident, yyDollar[2].string)
			}
			yyVAL.import_ = &syntax.Import{
				Alias: yyDollar[1].ident,
				ID:    trimString(yyDollar[2].string),
			}
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.imports = nil
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if debugParser {
				fmt.Println("import_list", yyDollar[1].imports, yyDollar[2].import_)
			}
			yyVAL.imports = append(yyVAL.imports, yyDollar[2].import_)
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.imports = nil
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if debugParser {
				fmt.Println("imports", yyDollar[3].imports)
			}
			yyVAL.imports = append(yyVAL.imports, yyDollar[3].imports...)
		}
	case 17:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.options = nil
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if debugParser {
				fmt.Println("options", yyDollar[3].options)
			}
			yyVAL.options = append(yyVAL.options, yyDollar[3].options...)
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.options = nil
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if debugParser {
				fmt.Println("option_list", yyDollar[1].options, yyDollar[2].option)
			}
			yyVAL.options = append(yyVAL.options, yyDollar[2].option)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("option ", yyDollar[1].ident, yyDollar[3].string)
			}
			yyVAL.option = &syntax.Option{
				Name:  yyDollar[1].ident,
				Value: trimString(yyDollar[3].string),
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if debugParser {
				fmt.Printf("type *%v\n", yyDollar[1].type_)
			}
			yyVAL.type_ = yyDollar[1].type_
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Printf("type []%v\n", yyDollar[3].type_)
			}
			yyVAL.type_ = &syntax.Type{
				Kind:    syntax.KindList,
				Element: yyDollar[3].type_,
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if debugParser {
				fmt.Println("base type", yyDollar[1].ident)
			}
			yyVAL.type_ = &syntax.Type{
				Kind: syntax.GetKind(yyDollar[1].ident),
				Name: yyDollar[1].ident,
			}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Printf("base type %v.%v\n", yyDollar[1].ident, yyDollar[3].ident)
			}
			yyVAL.type_ = &syntax.Type{
				Kind:   syntax.KindReference,
				Name:   yyDollar[3].ident,
				Import: yyDollar[1].ident,
			}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if debugParser {
				fmt.Println("base type", "any")
			}
			yyVAL.type_ = &syntax.Type{
				Kind: syntax.KindAny,
				Name: "any",
			}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if debugParser {
				fmt.Println("base type", "message")
			}
			yyVAL.type_ = &syntax.Type{
				Kind: syntax.KindAnyMessage,
				Name: "message",
			}
		}
	case 33:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.definitions = nil
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if debugParser {
				fmt.Println("definitions", yyDollar[1].definitions, yyDollar[2].definition)
			}
			yyVAL.definitions = append(yyVAL.definitions, yyDollar[2].definition)
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if debugParser {
				fmt.Println("enum", yyDollar[2].ident, yyDollar[4].enum_values)
			}
			yyVAL.definition = &syntax.Definition{
				Type: syntax.DefinitionEnum,
				Name: yyDollar[2].ident,

				Enum: &syntax.Enum{
					Values: yyDollar[4].enum_values,
				},
			}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if debugParser {
				fmt.Println("enum value", yyDollar[1].ident, yyDollar[3].integer)
			}
			yyVAL.enum_value = &syntax.EnumValue{
				Name:  yyDollar[1].ident,
				Value: yyDollar[3].integer,
			}
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.enum_values = nil
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if debugParser {
				fmt.Println("enum values", yyDollar[1].enum_values, yyDollar[2].enum_value)
			}
			yyVAL.enum_values = append(yyVAL.enum_values, yyDollar[2].enum_value)
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			if debugParser {
				fmt.Println("message", yyDollar[2].ident, yyDollar[4].fields)
			}
			yyVAL.definition = &syntax.Definition{
				Type: syntax.DefinitionMessage,
				Name: yyDollar[2].ident,

				Message: &syntax.Message{
					Fields: yyDollar[4].fields,
				},
			}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("message field", yyDollar[1].ident, yyDollar[2].type_, yyDollar[3].integer)
			}
			yyVAL.field = &syntax.Field{
				Name: yyDollar[1].ident,
				Type: yyDollar[2].type_,
				Tag:  yyDollar[3].integer,
			}
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.fields = nil
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if debugParser {
				fmt.Println("message fields", yyDollar[1].field)
			}
			yyVAL.fields = []*syntax.Field{yyDollar[1].field}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("message fields", yyDollar[1].fields, yyDollar[3].field)
			}
			yyVAL.fields = append(yyVAL.fields, yyDollar[3].field)
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if debugParser {
				fmt.Println("struct", yyDollar[2].ident, yyDollar[4].struct_fields)
			}
			yyVAL.definition = &syntax.Definition{
				Type: syntax.DefinitionStruct,
				Name: yyDollar[2].ident,

				Struct: &syntax.Struct{
					Fields: yyDollar[4].struct_fields,
				},
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("struct field", yyDollar[1].ident, yyDollar[2].type_)
			}
			yyVAL.struct_field = &syntax.StructField{
				Name: yyDollar[1].ident,
				Type: yyDollar[2].type_,
			}
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.struct_fields = nil
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if debugParser {
				fmt.Println("struct fields", yyDollar[1].struct_fields, yyDollar[2].struct_field)
			}
			yyVAL.struct_fields = append(yyVAL.struct_fields, yyDollar[2].struct_field)
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if debugParser {
				fmt.Println("service", yyDollar[2].ident, yyDollar[4].methods)
			}
			yyVAL.definition = &syntax.Definition{
				Type: syntax.DefinitionService,
				Name: yyDollar[2].ident,

				Service: &syntax.Service{
					Methods: yyDollar[4].methods,
				},
			}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if debugParser {
				fmt.Println("subservice", yyDollar[2].ident, yyDollar[4].methods)
			}
			yyVAL.definition = &syntax.Definition{
				Type: syntax.DefinitionService,
				Name: yyDollar[2].ident,

				Service: &syntax.Service{
					Sub:     true,
					Methods: yyDollar[4].methods,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.methods = nil
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.methods = append(yyDollar[1].methods, yyDollar[2].method)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("method", yyDollar[1].ident, yyDollar[2].method_input)
			}
			yyVAL.method = &syntax.Method{
				Name:  yyDollar[1].ident,
				Input: yyDollar[2].method_input,
			}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if debugParser {
				fmt.Println("method", yyDollar[1].ident, yyDollar[2].method_input, yyDollar[3].bool)
			}
			yyVAL.method = &syntax.Method{
				Name:   yyDollar[1].ident,
				Input:  yyDollar[2].method_input,
				Oneway: true,
			}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if debugParser {
				fmt.Println("method", yyDollar[1].ident, yyDollar[2].method_input, yyDollar[3].method_output)
			}
			yyVAL.method = &syntax.Method{
				Name:   yyDollar[1].ident,
				Input:  yyDollar[2].method_input,
				Output: yyDollar[3].method_output,
			}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			if debugParser {
				fmt.Println("method", yyDollar[1].ident, yyDollar[2].method_input, yyDollar[3].method_channel)
			}
			yyVAL.method = &syntax.Method{
				Name:    yyDollar[1].ident,
				Input:   yyDollar[2].method_input,
				Channel: yyDollar[3].method_channel,
			}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if debugParser {
				fmt.Println("method", yyDollar[1].ident, yyDollar[2].method_input, yyDollar[3].method_channel, yyDollar[4].method_output)
			}
			yyVAL.method = &syntax.Method{
				Name:    yyDollar[1].ident,
				Input:   yyDollar[2].method_input,
				Channel: yyDollar[3].method_channel,
				Output:  yyDollar[4].method_output,
			}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("method input", yyDollar[2].type_)
			}
			yyVAL.method_input = yyDollar[2].type_
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("method input", yyDollar[2].fields)
			}
			yyVAL.method_input = yyDollar[2].fields
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if debugParser {
				fmt.Println("method oneway", yyDollar[1].ident)
			}
			yyVAL.bool = true
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if debugParser {
				fmt.Println("method output", yyDollar[1].type_)
			}
			yyVAL.method_output = yyDollar[1].type_
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("method output", yyDollar[2].fields)
			}
			yyVAL.method_output = yyDollar[2].fields
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("method channel", yyDollar[2].type_)
			}

			yyVAL.method_channel = &syntax.MethodChannel{
				In: yyDollar[2].type_,
			}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("method channel", yyDollar[2].type_)
			}

			yyVAL.method_channel = &syntax.MethodChannel{
				Out: yyDollar[2].type_,
			}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if debugParser {
				fmt.Println("method channel", yyDollar[2].type_, yyDollar[4].type_)
			}

			yyVAL.method_channel = &syntax.MethodChannel{
				In:  yyDollar[2].type_,
				Out: yyDollar[4].type_,
			}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			return yyLexErrorf(yylex,
				"invalid channel syntax, expected (<-%v, %v->), got (%v->, <-%v)",
				yyDollar[4].type_, yyDollar[2].type_, yyDollar[2].type_, yyDollar[4].type_)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.type_ = yyDollar[3].type_
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			return yyLexErrorf(yylex,
				"invalid channel receive syntax, expected <-%v, got %v<-",
				yyDollar[1].type_, yyDollar[1].type_)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.type_ = yyDollar[1].type_
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			return yyLexErrorf(yylex,
				"invalid channel send syntax, expected %v->, got ->%v",
				yyDollar[3].type_, yyDollar[3].type_)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if debugParser {
				fmt.Println("method field list", yyDollar[1].fields)
			}
			yyVAL.fields = yyDollar[1].fields
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.fields = nil
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if debugParser {
				fmt.Println("method fields", yyDollar[1].field)
			}
			yyVAL.fields = []*syntax.Field{yyDollar[1].field}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("method fields", yyDollar[1].fields, yyDollar[3].field)
			}
			yyVAL.fields = append(yyDollar[1].fields, yyDollar[3].field)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if debugParser {
				fmt.Println("method field", yyDollar[1].ident, yyDollar[2].type_, yyDollar[3].integer)
			}
			yyVAL.field = &syntax.Field{
				Name: yyDollar[1].ident,
				Type: yyDollar[2].type_,
				Tag:  yyDollar[3].integer,
			}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	}
	goto yystack /* stack new state and value */
}
